---
description: "This rule governs the usage of UV package manager in the project. It should be applied whenever: (1) Installing or managing Python packages, (2) Setting up Python environments, (3) Running Python code or tests, or (4) Modifying dependency files. This rule ensures consistent package management and environment setup across the project."
globs:
alwaysApply: true
---

# UV Package Manager Standards

## Critical Rules

- NEVER use pip or pip-related commands (pip install, pip list, etc.)
- NEVER use `uv pip` commands - this is incorrect usage
- ALWAYS use proper UV commands:
  * `uv sync` for installing all dependencies from pyproject.toml
  * `uv sync --dev` for installing with development dependencies
  * `uv install {package}` for installing single packages
- For running Python scripts/tests:
  * Use `uv run python` instead of just `python`
  * Use `uv run pytest` instead of just `pytest`
  * Use `uv run` for any other Python-based commands
- When installing packages:
  * ALWAYS use `uv install {package}` for single package
  * ALWAYS use `uv sync` for installing all dependencies
  * NEVER install packages without version pins in production
- For development workflows:
  * Use `uv sync --dev` to install development dependencies
  * UV will automatically maintain a lockfile (uv.lock) for reproducible builds
- ALWAYS specify package versions in pyproject.toml
- NEVER mix different package managers in the same project

## Examples

<example>
# Good - Proper UV Usage
```bash
# Installing dependencies
uv sync
uv sync --dev  # with development dependencies
uv install pytest==8.0.0  # single package

# Running tests
uv run pytest tests/
uv run python -m pytest
```

# Good - Package Version Management
```toml
# pyproject.toml
[project]
dependencies = [
    "pytest==8.0.0",
    "discord.py==2.3.2",
    "loguru==0.7.2"
]

[project.optional-dependencies]
dev = [
    "black==24.2.0",
    "mypy==1.8.0",
    "ruff==0.3.0"
]
```
</example>

<example type="invalid">
# Bad - Incorrect UV Usage
```bash
# NEVER do these
pip install pytest
uv pip install pytest
uv pip sync requirements.txt
python -m pytest
pip freeze > requirements.txt

# NEVER mix package managers
poetry install
pip install -r requirements.txt
```

# Bad - Unversioned Dependencies
```toml
# pyproject.toml
[project]
dependencies = [
    "pytest",  # BAD: No version specified
    "discord.py",  # BAD: No version specified
]
```
</example>
