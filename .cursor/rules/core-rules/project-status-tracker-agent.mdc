---
description: "This rule governs project status tracking and reporting. It should be applied whenever: (1) A status check is requested, (2) Progress needs to be evaluated against story files, (3) New implementation tasks are being planned, or (4) Project structure needs verification. This rule ensures efficient progress tracking by first inspecting the actual repository state before making recommendations."
globs:
alwaysApply: false
---

# Project Status Tracker Standards

## Critical Rules

- ALWAYS check repository state BEFORE making recommendations:
  * Use `tree -L 7 -I "*.pyc|__pycache__|.git|.pytest_cache|.ruff_cache|.mypy_cache|.coverage|htmlcov|.venv|.env|*.egg-info|build|dist|node_modules|.DS_Store|images"` to get current structure
  * Parse tree output to identify existing files and directories
  * Compare against story requirements to identify gaps

- For each story task verification:
  1. First check if required files/directories exist
  2. If files exist, read their contents to verify implementation
  3. Only mark as incomplete if verification fails or files don't exist
  4. Update story file with completion status using checkmarks
  5. Track story progress in a .cursor/story-progress.json file

- When generating status reports:
  * Use ‚úÖ for completed items
  * Use üöß for in-progress items
  * Use ‚ùå for incomplete items
  * Use üîÑ for items needing review
  * Use üö´ for deferred items
  * Add explanatory notes for partial completions
  * Include story reference and task IDs

- For each major component, verify:
  1. Directory structure exists
  2. Required files are present
  3. File contents match requirements
  4. Tests exist and pass
  5. Documentation is present

- Status report must include:
  * Story ID and name
  * Summary of completed work
  * Outstanding tasks
  * Next priority tasks
  * Relevant constraints
  * Dependencies between tasks
  * Story completion percentage

- Story progress tracking:
  1. After status check, update story file:
     * Mark completed tasks with ‚úÖ
     * Update task status comments
     * Add evidence of completion
  2. Generate story progress summary:
     * Tasks completed vs total
     * Current blockers
     * Next actions
  3. Return to story implementation:
     * Suggest next task to implement
     * Include relevant file paths
     * Note any dependencies

- NEVER assume a task is incomplete without checking:
  * File existence
  * File contents
  * Test coverage
  * Documentation
  * Story requirements

## Examples

<example>
# Good - Proper Status Check Process

```bash
# 1. Get repository structure
tree -L 7 -I "*.pyc|__pycache__|.git|.pytest_cache|.ruff_cache|.mypy_cache|.coverage|htmlcov|.venv|.env|*.egg-info|build|dist|node_modules|.DS_Store|images"

# 2. Check specific files
cat pyproject.toml  # Check package configuration
cat .pre-commit-config.yaml  # Check dev environment
cat pytest.ini  # Check test configuration

# 3. Generate status report
## Story: story-1.story.md - Project Initialization
## Progress: 15/50 tasks (30% complete)

## ‚úÖ Completed Tasks
- Basic project structure
  * src/boss_bot/ directory ‚úÖ (Task 1.1)
  * tests/ directory ‚úÖ (Task 1.2)
  * docs/ directory ‚úÖ (Task 1.3)

## üöß In Progress
- Test infrastructure (Task 3)
  * pytest configuration üöß
  * test coverage setup ‚ùå

## ‚ùå Outstanding Tasks
- CI/CD Pipeline (Task 5)
- Documentation (Task 4)

## Next Priority Tasks
1. Complete Task 3.1: Configure pytest plugins
   * Path: tests/conftest.py
   * Dependencies: pyproject.toml configuration
2. Start Task 3.2: Create test fixtures

## Story Updates
* Updated story-1.story.md with completion status
* Added evidence for completed tasks
* Next focus: Test infrastructure setup
```

# 4. Update story file
```markdown
# Story-1: Project Initialization

## Tasks
1. Initialize Project Structure
   - [‚úÖ] Create directory layout
     * Evidence: Directory structure verified
   - [üöß] Configure pytest
     * Status: Configuration started
```
</example>

<example type="invalid">
# Bad - Incorrect Status Check

```bash
# DON'T make assumptions without checking
## ‚ùå Incomplete Tasks
- Project structure (WRONG: Didn't check if it exists)
- Test setup (WRONG: Didn't verify test files)

# DON'T ignore existing work
## Next Steps
- Create project structure (WRONG: May already exist)
- Set up testing (WRONG: May be partially done)

# DON'T skip verification
Status: All tasks incomplete (WRONG: No verification performed)

# DON'T forget story context
Next steps listed without story reference (WRONG)
No story file updates (WRONG)
```
</example>

## Implementation Guide

1. Repository Inspection:
   ```bash
   # Get current structure
   tree -L 7 -I "*.pyc|__pycache__|.git|.pytest_cache|.ruff_cache|.mypy_cache|.coverage|htmlcov|.venv|.env|*.egg-info|build|dist|node_modules|.DS_Store|images"
   ```

2. File Verification:
   ```python
   def verify_task(task_path, requirements, story_id):
       # Check existence
       if not Path(task_path).exists():
           return "‚ùå Not started"

       # Read contents
       contents = Path(task_path).read_text()

       # Verify against requirements
       if meets_requirements(contents, requirements):
           # Update story progress
           update_story_progress(story_id, task_path, "complete")
           return "‚úÖ Complete"

       update_story_progress(story_id, task_path, "in_progress")
       return "üöß In progress"
   ```

3. Story Progress Tracking:
   ```python
   def update_story_progress(story_id, task_path, status):
       """Update story progress file."""
       progress_file = Path(".cursor/story-progress.json")
       progress = load_progress(progress_file)

       # Update task status
       progress[story_id]["tasks"][task_path] = {
           "status": status,
           "updated_at": datetime.now(),
           "evidence": gather_evidence(task_path)
       }

       # Update story file
       update_story_file(story_id, task_path, status)

       # Save progress
       save_progress(progress_file, progress)
   ```

4. Status Report Generation:
   ```markdown
   # Project Status Report for {story_id}

   ## Story Progress: {completed_tasks}/{total_tasks} ({percentage}%)

   ## ‚úÖ Completed Tasks
   - Task 1 (ID: 1.1)
     * Evidence: file.py implements X
     * Coverage: 85%

   ## üöß In Progress
   - Task 2 (ID: 1.2)
     * Status: Configuration started
     * Remaining: Need to add X, Y

   ## ‚ùå Outstanding Tasks
   - Task 3 (ID: 1.3)
     * Blocked by: Task 2
     * Priority: High

   ## Next Steps
   1. Complete Task 2
      * File: src/config.py
      * Story: story-1.story.md
   2. Start Task 3
   ```

5. Dependency Tracking:
   ```mermaid
   graph TD
       A[Task 1.1] --> B[Task 1.2]
       B --> C[Task 1.3]
       B --> D[Task 2.1]

       style A fill:#90EE90
       style B fill:#FFB6C1
       style C fill:#D3D3D3
       style D fill:#D3D3D3
   ```
