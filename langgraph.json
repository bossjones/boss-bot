{
    "base_image": "langchain/langgraph-api:0.2",
    "dockerfile_lines": [
        "# Install system dependencies for boss-bot",
        "",
        "ENV UV_SYSTEM_PYTHON=1 \\",
        "    UV_PIP_DEFAULT_PYTHON=/usr/bin/python3 \\",
        "    UV_LINK_MODE=copy \\",
        "    UV_CACHE_DIR=/root/.cache/uv/ \\",
        "    UV_COMPILE_BYTECODE=1 \\",
        "    PYTHONASYNCIODEBUG=1 \\",
        "    DEBIAN_FRONTEND=noninteractive \\",
        "    TAPLO_VERSION=0.9.3 \\",
        "    UV_VERSION=0.7.15 \\",
        "    PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\",
        "    PYTHONFAULTHANDLER=1 \\",
        "    PYTHONDONTWRITEBYTECODE=1 \\",
        "    PYTHONUNBUFFERED=1",
        "",
        "# Install comprehensive system dependencies",
        "RUN apt-get update && apt-get -qq install -y --no-install-recommends \\",
        "    python3-dev python3 ca-certificates python3-numpy python3-setuptools python3-wheel python3-pip \\",
        "    g++ gcc ninja-build cmake build-essential autoconf automake libtool \\",
        "    libmagic-dev poppler-utils libreoffice libomp-dev \\",
        "    tesseract-ocr tesseract-ocr-por libyaml-dev \\",
        "    ffmpeg libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \\",
        "    wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev \\",
        "    python3-openssl git libpq5 libpq-dev \\",
        "    libxml2-dev libxslt1-dev libcairo2-dev libgirepository1.0-dev libgraphviz-dev \\",
        "    libjpeg-dev libopencv-dev libpango1.0-dev \\",
        "    libprotobuf-dev protobuf-compiler \\",
        "    rustc cargo \\",
        "    libwebp-dev libzbar0 libzbar-dev \\",
        "    imagemagick ghostscript pandoc aria2 \\",
        "    zsh bash-completion pkg-config openssl \\",
        "    unzip gzip vim tree less sqlite3 \\",
        "    && rm -rf /var/lib/apt/lists/*",
        "",
        "# Install taplo and just",
        "COPY ./install_taplo.sh .",
        "RUN chmod +x install_taplo.sh && bash ./install_taplo.sh && mv taplo /usr/local/bin/taplo && rm install_taplo.sh \\",
        "    && curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin",
        "",
        "# Install rust toolchain",
        "RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | env PATH='/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' bash -s -- -y",
        "ENV PATH='/root/.cargo/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'",
        "",
        "# Install UV package manager",
        "ADD https://astral.sh/uv/${UV_VERSION}/install.sh /uv-installer.sh",
        "RUN env PATH='/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' bash /uv-installer.sh && rm /uv-installer.sh",
        "",
        "ENV PATH='/root/.local/bin:/root/.cargo/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'",
        "",
        "# Set working directory for boss-bot",
        "WORKDIR /deps/boss-bot",
        "",
        "# Copy dependency files first for optimal layer caching",
        "COPY pyproject.toml uv.lock ./",
        "",
        "# Install dependencies only (UV Docker best practice)",
        "RUN --mount=type=cache,target=/root/.cache/uv \\",
        "    --mount=type=bind,source=uv.lock,target=uv.lock \\",
        "    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \\",
        "    pip install -U pip && \\",
        "    uv sync --frozen --no-install-project --no-dev --compile-bytecode",
        "",
        "# Copy project source code",
        "COPY . /deps/boss-bot",
        "",
        "# Install project with compiled bytecode for performance",
        "RUN --mount=type=cache,target=/root/.cache/uv \\",
        "    uv sync --no-dev --frozen --compile-bytecode --no-editable"
    ],
    "graphs": {
        "download_workflow": "./src/boss_bot/ai/workflows/download_workflow.py:graph"
    },
    "env": ".env",
    "python_version": "3.12",
    "dependencies": [
        "."
    ],
    "checkpointer": {
        "ttl": {
            "strategy": "delete",
            "sweep_interval_minutes": 60,
            "default_ttl": 43200
        }
    },
    "store": {
        "ttl": {
            "refresh_on_read": true,
            "sweep_interval_minutes": 120,
            "default_ttl": 10080
        },
        "index": {
            "embed": "openai:text-embedding-3-small",
            "dims": 1536,
            "fields": ["content", "metadata"]
        }
    },
    "http": {
        "configurable_headers": {
            "include": ["x-user-id", "x-discord-guild-id", "x-discord-channel-id"],
            "exclude": ["authorization", "x-api-key"]
        }
    },
    "env_vars": {
        "PYTHONDONTWRITEBYTECODE": "1",
        "PYTHONUNBUFFERED": "1",
        "UV_CACHE_DIR": "/root/.cache/uv",
        "UV_COMPILE_BYTECODE": "1",
        "UV_LINK_MODE": "copy",
        "UV_PIP_DEFAULT_PYTHON": "/usr/bin/python3",
        "UV_SYSTEM_PYTHON": "1",
        "PYTHONASYNCIODEBUG": "1",
        "PYTHONFAULTHANDLER": "1",
        "PYTHONPATH": "${PYTHONPATH}:${PWD}",
        "BOSS_BOT_LOG_LEVEL": "INFO",
        "BOSS_BOT_ENABLE_AI": "true",
        "BOSS_BOT_AI_PROVIDER": "openai"
    }
}
